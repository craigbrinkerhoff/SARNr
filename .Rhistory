(1/b)*(-q/delta)*log(1/Sobs)
}
forPlot <- gather(df, key=key, value=value, c('Qcolin', 'Qdingman'))
ggplot(forPlot, aes(x=r, y=value, color=key)) +
geom_line()
df <- data.frame('r'=seq(1,20,1), 'Qcolin'=NA, 'Qdingman'=NA)
for(i in 1:nrow(df)){
r <- df[i,]$r
df[i,]$Qcolin = (delta*log(Wobs))-(1.67*r*log(Wb))+(1.67*log(Db))-(1.67*log((r+1)/r))-(log(n))+(0.5*log(Sobs))
df[i,]$Qdingman <- (1/b)*log(Wobs) +
(1/b)*(((r+r*p)/delta))*log(1/Wb) +
(1/b)*(((1+p)/delta))*log(1/(1/Db)) +
(1/b)*((1+p)/delta)*log(1/(((r+1)/r))) +
(1/b)*(1/delta)*log(1/n) +
(1/b)*(-q/delta)*log(1/Sobs)
}
forPlot <- gather(df, key=key, value=value, c('Qcolin', 'Qdingman'))
ggplot(forPlot, aes(x=r, y=value, color=key)) +
geom_line()
View(df)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
View(df)
ggplot(forPlot, aes(x=r, y=exp(value), color=key)) +
geom_line()
View(df)
View(df)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
source("~/colinMath.R", echo=TRUE)
-5^(1/4)*5^(-1.4)
-5^(1/4)*5^(-1/4)
-5^(1/8)*5^(-1/8)
48/16
48/16
43/3
43/48
9/16
getwd()
changer::changer("C:\Users\craig\Documents\OneDrive - University of Massachusetts\Ongoing Projects\R_SARN", 'SARNr')
changer::changer("C:\\Users\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN", 'SARNr')
changer::changer('C:\\Users\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN', 'SARNr')
changer::changer('C:/Users\craig/Documents/OneDrive - University of Massachusetts/Ongoing Projects/R_SARN', 'SARNr')
changer::changer('\\Users\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN', 'SARNr')
changer::changer(paste0(getwd(), 'OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN'), 'SARNr')
changer::changer(paste0(getwd(), '\\OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN'), 'SARNr')
changer::changer(paste0(getwd(), '\\OneDrive - University of Massachusetts\\Ongoing Projects\\R_SARN'), 'SARNr')
SARNr::sarn_data(
)
library(SARNr)
sarn_data(x,y,z)
library(devtools)
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, build_vignettes = TRUE)
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, build_vignettes = TRUE)
library(SARNr)
SARNr::
vignette(SARNr)
vignette("introduction", package='SARNr')
vignette(package='SARNr')
library(SARNr)
sarn_data()
remove.packages('SARNr')
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, auth_token = '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')
library(SARNr)
sarn_data()
SARNr::sarn_data()
sessionInfo()
remove.packages('SARNr')
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, auth_token = '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')
library(SARNr)
sarn_data()
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, auth_token = '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')
install_github("craigbrinkerhoff/SARNr", ref='main', force=TRUE, auth_token = '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', build_vignettes = TRUE)
library(SARNr)
sarn_sata
sarn_data()
library(SARNr)
library(SARNr)
vignette(package='SARNr')
library(SARNr)
library(sf) #for vector processing
library(terra) #for raster processing
sessionInfo()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
setwd('C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\SARNr')
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
warnings()
View(joinedNetwork)
sessionInfo()
plot(rivnet_rs_rast)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
sessionInfo()
library(sf)
sf_use_s2()
sf_use_s2(TRUE)
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
sf_use_s2()
library(devtools)
document()
document()
document()
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
bufferSize = 5
## PREPROCESSING
rivnet_dem_buf <- st_buffer(data$dem_network, dist=bufferSize, endCapStyle='ROUND')
v <- vect(rivnet_dem_buf) #necessary and dumb conversion from sf vector to terra vector...
rivnet_dem_buf_rast <- rast(extent = ext(data$riverMask), crs = crs(v), resolution=res(data$riverMask)) #use extent from RS network
rivnet_dem_buf_rast <- rasterize(x=v, y=rivnet_dem_buf_rast)
rivnet_combo_rast <- (rivnet_dem_buf_rast+1) + data$riverMask #3 equals dem+rs synonymous rivers
rivnet_combo <- as.polygons(rivnet_combo_rast)
rivnet_combo <- st_as_sf(rivnet_combo) #back to SF...
rivnet_combo <- st_make_valid(rivnet_combo) #repair geometries
#GET 'COINCIDENT NETWORK': DEM WITH A CORRESPONDING RS RIVER
#currently using un-snapped network as the other way makes no sense? In my view, the snapping aids in making a connected raster network but is less useful here for smooth, realistic river networks
coincident_network <- st_intersection(rivnet_combo, data$dem_network)
#GET 'COINCIDENT NETWORK': DEM WITH A CORRESPONDING RS RIVER
#currently using un-snapped network as the other way makes no sense? In my view, the snapping aids in making a connected raster network but is less useful here for smooth, realistic river networks
coincident_network <- st_intersection(st_geometry(rivnet_combo), st_geometry(data$dem_network))
coincident_network <- st_collection_extract(coincident_network, "LINESTRING") #can sometimes return points if line only intersects polygon at a point, so we just remove those
coincident_network <- select(coincident_network, c('cat', 'geometry'))
#GET 'COINCIDENT NETWORK': DEM WITH A CORRESPONDING RS RIVER
#currently using un-snapped network as the other way makes no sense? In my view, the snapping aids in making a connected raster network but is less useful here for smooth, realistic river networks
coincident_network <- st_intersection(rivnet_combo, data$dem_network)
coincident_network <- st_collection_extract(coincident_network, "LINESTRING") #can sometimes return points if line only intersects polygon at a point, so we just remove those
coincident_network <- select(coincident_network, c('cat', 'geometry'))
colnames(coincident_network) <- c('reachID', 'geometry')
coincident_network <- do.call(rbind,lapply(1:nrow(coincident_network),function(i){st_cast(coincident_network[i,],"LINESTRING")}))
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
#st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
st_erase = function(x, y) {
st_difference(
x %>% st_buffer(0),
st_union(st_combine(y)) %>% st_buffer(0)
)
}
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
non_coincident_network <- st_collection_extract(non_coincident_network, "LINESTRING") #can sometimes return points if line only intersects polygon at a point, so we just remove those
non_coincident_network <- select(non_coincident_network, c('cat', 'geometry'))
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
non_coincident_network <- st_collection_extract(non_coincident_network, "LINESTRING") #can sometimes return points if line only intersects polygon at a point, so we just remove those
non_coincident_network <- select(non_coincident_network, c('cat', 'geometry'))
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
#st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
st_erase = function(x, y) {
st_difference(
x,
st_union(st_combine(y)) %>% st_buffer(0)
)
}
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
#st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
st_erase = function(x, y) {
st_difference(
x %>% at_buffer(0),
st_union(st_combine(y))
)
}
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
#st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
st_erase = function(x, y) {
st_difference(
x %>% st_buffer(0),
st_union(st_combine(y))
)
}
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
#' Spatial erase function
#'
#' Homebaked sf function to mimic the Erase tool in ArcGIS
#'
#' @param  x: layer to erase things away from
#' @param y: overlaying layer that defines the 'erase zones'
#'
#' @import sf
st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))
#GET 'NON-COINCIDENT NETWORK': DEM WITH NO CORRESPONDING RS RIVER
non_coincident_network <- st_erase(data$dem_network, rivnet_combo)
non_coincident_network <- st_collection_extract(non_coincident_network, "LINESTRING") #can sometimes return points if line only intersects polygon at a point, so we just remove those
non_coincident_network <- select(non_coincident_network, c('cat', 'geometry'))
colnames(non_coincident_network) <- c('reachID', 'geometry')
non_coincident_network <- do.call(rbind,lapply(1:nrow(non_coincident_network),function(i){st_cast(non_coincident_network[i,],"LINESTRING")}))
plot(non_coincident_network)
plot(coincident_network)
plot(rivnet_combo)
View(rivnet_combo)
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
plot(rivnet_dem)
plot(rivnet_rs_rast)
plot(dem)
plot(dem_domain)
plot(trimmedNetwork$trimmedNetwork_fin)
plot(data$riverMask)
plot(data$dem_network)
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
plot(fin)
plot(data$dem_network)
data$riverMask
rivnet_rs_rast2 <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
plot(rivnet_rs_rast2)
rivnet_rs_rast2[rivnet_rs_rast2 == 0] <- NA
plot(rivnet_rs_rast2)
rivnet_rs_rast[rivnet_rs_rast == 0] <- NA
plot(rivnet_rs_rast)
load_all()
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
plot(data$riverMask)
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
plot(fin)
document()
library(SARNr)
library(sf) #for vector processing
library(terra) #for raster processing
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
plot(rivnet_rs_rast)
writeRaster('C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Proposals\\Daly_Fellowship_2021\\RiverMask.tif')
writeRaster(rivnet_rs_rast, 'C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Proposals\\Daly_Fellowship_2021\\RiverMask.tif')
library(devtools)
load_all()
install.packages('hydrostreamer')
install.packages('sfnetworks')
install.packages('tidygraphs')
devtools::install_github("mkkallio/hydrostreamer")
library(roxygen2)
roxygenise("SARNr")
roxygenise()
load_all()
load_all()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp') #DEM river networks
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif') #dem downscaled to 3m
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif') #3m PlanetScope image
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
warnings()
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
plot(fin)
View(fin)
tempdir()
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
View(fin)
colnames(fin)
roxygenise()
load_all()
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
plot(rivnet_rs_rast)
t <- values(rivnet_rs_rast)
temp <- values(rivnet_rs_rast)
temp <- values(rivnet_rs_rast)[,1]
temp <- values(rivnet_rs_rast)
temp <- values(rivnet_rs_rast)[1,]
temp <- values(rivnet_rs_rast)[,1]
checkMask <- function(mask){
temp <- values(rivnet_rs_rast)[,1]
if(any(is.nan(temp)==0 || temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask(rivnet_rs_rast)
checkMask(dem)
checkMask <- function(mask){
temp <- values(rivnet_rs_rast)[,1]
if(any(is.nan(temp)==0 | temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask(dem)
checkMask <- function(mask){
temp <- values(mask)[,1]
if(any(is.nan(temp)==0 | temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask(dem)
checkMask(rivnet_dem)
checkMask(rivnet_rs_rast)
any(is.nan(temp)==0 | temp != 1)
summary(temp)
checkMask <- function(mask){
temp <- values(mask)[,1]
if(any(is.na(temp)==0 | temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask(rivnet_rs_rast)
checkMask <- function(mask){
temp <- values(mask)[,1]
if(any(is.na(temp)==0 & temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask <- function(mask){
temp <- values(mask)[,1]
if(any(is.nan(temp)==0 & temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
}
checkMask(rivnet_rs_rast)
temp[100] <- 3
if(any(is.nan(temp)==0 & temp != 1)){
stop('River mask must be composed of only 1s and NaNs!!!')
}
rm(checkMask())
rm(checkMask
)
rm(temp)
rm(t)
roxygenise()
load_all()
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
vignette(SARNr)
vignette(package=SARNr)
build_vignettes()
use_vignette()
use_vignette("introduction")
use_vignette("introduction")
build_vignettes()
vignette('introduction')
vignette('introduction', package='SARNr')
