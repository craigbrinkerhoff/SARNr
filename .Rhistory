data <- sarn_data(rivnet_dem, rivnet_rs, rivnet_rs_rast) #create SARN object
library(sf)
library(terra)
data <- sarn_data(rivnet_dem, rivnet_rs, rivnet_rs_rast) #create SARN object
source("C:/Users/cbrinkerhoff/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/dataprep.R", echo=TRUE)
data <- sarn_data(rivnet_dem, rivnet_rs, rivnet_rs_rast) #create SARN object
View(data)
plot(data$rs_raster)
source("C:/Users/cbrinkerhoff/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/actualSARN.R", echo=TRUE)
source("C:/Users/cbrinkerhoff/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/actualSARN.R", echo=TRUE)
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
sessionInfo()
library(sf)
install.packages('terra')
install.packages("terra")
sessionInfo()
library(deldiir)
library(deldir)
library(splancs)
library(regeos)
library(rgeos)
library(igraph)
densify <- function(xy,n=5){
## densify a 2-col matrix
cbind(dens(xy[,1],n=n),dens(xy[,2],n=n))
}
dens <- function(x,n=5){
## densify a vector
out = rep(NA,1+(length(x)-1)*(n+1))
ss = seq(1,length(out),by=(n+1))
out[ss]=x
for(s in 1:(length(x)-1)){
out[(1+ss[s]):(ss[s+1]-1)]=seq(x[s],x[s+1],len=(n+2))[-c(1,n+2)]
}
out
}
simplecentre <- function(xyP,dense){
require(deldir)
require(splancs)
require(igraph)
require(rgeos)
### optionally add extra points
if(!missing(dense)){
xy = densify(xyP,dense)
} else {
xy = xyP
}
### compute triangulation
d=deldir(xy[,1],xy[,2])
### find midpoints of triangle sides
mids=cbind((d$delsgs[,'x1']+d$delsgs[,'x2'])/2,
(d$delsgs[,'y1']+d$delsgs[,'y2'])/2)
### get points that are inside the polygon
sr = SpatialPolygons(list(Polygons(list(Polygon(xyP)),ID=1)))
ins = over(SpatialPoints(mids),sr)
### select the points
pts = mids[!is.na(ins),]
dPoly = gDistance(as(sr,"SpatialLines"),SpatialPoints(pts),byid=TRUE)
pts = pts[dPoly > max(dPoly/1.5),]
### now build a minimum spanning tree weighted on the distance
G = graph.adjacency(as.matrix(dist(pts)),weighted=TRUE,mode="upper")
T = minimum.spanning.tree(G,weighted=TRUE)
### get a diameter
path = get.diameter(T)
if(length(path)!=vcount(T)){
stop("Path not linear - try increasing dens parameter")
}
### path should be the sequence of points in order
list(pts=pts[path,],tree=T)
}
onering=function(p){p@polygons[[1]]@Polygons[[1]]@coords}
classified <- rast('debug/classified.tif')
library(terra)
onering=function(p){p@polygons[[1]]@Polygons[[1]]@coords}
classified <- rast('debug/classified.tif')
classified_P <- as.polygons(classified)
classified_p[[1]]
classified_p
classified_P
classified_P[[1]]
plot(classified_P[[1]])
plot(classified_P)
View(classified_P)
classified_p <-  as(classified_P, "Spatial")
View(classified_p)
plot(classified_p[[1]])
plot(classified_p@polygons[[1]])
classified_p <- as.polygons(classified)
classified_p <-  as(classified_p, "Spatial")
plot(classified_p[1,])
plot(classified_p[2,])
plot(classified_p[3,])
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
classified <- mask(classified, dem)
dem
classified
plot(classified)
plot(classified_p[2,])
plot(classified_p[2,3])
plot(classified_p[1,])
plot(classified_p[2,])
rm(classified_p)
classified <- rast('debug/classified.tif')
classified_p <-  as(classified_p, "Spatial")
classified_p <- as.polygons(classified)
classified_p <-  as(classified_p, "Spatial")
View(classified_p)
View(classified_p[2,])
plot(classified_p[2,])
plot(classified_p[2,]$green)
classified_p[2,]@data
plot(classified_p[2,]@polygons)
plot(classified_p[2,]@polygons[[1]])
View(classified_p)
classified_p[2,]@polygons[[1]]
classified_p[2,]@polygons[[1]]$coords
plot(classified_p[2,])
classified_p <- as.polygons(classified, dissolve=FALSE)
classified_p <- as.polygons(classified)
library(sf)
t <- st_as_sf(classified_p)
View(t)
plot(t[1,])
plot(t[2,])
classified_p <-  as(classified_p, "Spatial") [2,]
View(classified_p)
plot(classified_p)
#read shp
names(classified_p)
#select the column of the attribute table that will determine the split of the shp
unique <- unique(classified_p$id)
View(classified_p)
View(t)
classified_p <- sp::disaggregate(classified_p)
classified_p <- as.polygons(classified)
classified_p <- disaggregate(classified_p)
classified_p <-  as(classified_p, "Spatial")
View(classified_p)
plot(classified_p[1,])
plot(classified_p[2,])
plot(classified_p[100,])
plot(classified_p[14,])
plot(classified_p)
classified_p <- as.polygons(classified)
classified_p <- disaggregate(classified_p)
writeVector(classified_p, 'debug/test.shp')
classified_p <- classified_p[classified_p$green == 1,]
writeVector(classified_p, 'debug/test.shp')
writeVector(classified_p, 'debug/test.shp', overwrite=TRUE)
classified_p <-  as(classified_p, "Spatial")
classified_p[1]
plot(classified_p[100])
plot(classified_p[100,])
plot(classified_p[10,])
plot(classified_p[1100,])
plot(classified_p[110,])
plot(classified_p[548,])
plot(classified_p[54,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_P[54,]))
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]))
source("~/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/thinning_2.R", echo=TRUE)
source("~/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/thinning_2.R", echo=TRUE)
source("~/OneDrive - University of Massachusetts/Ongoing Projects/SARNr/R/thinning_2.R", echo=TRUE)
onering(classified_p[54,])
t <- onering(classified_p[54,])
### optionally add extra points
if(!missing(dense)){
xy = densify(xyP,dense)
} else {
xy = xyP
}
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]), 100)
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]), 10)
lines(scp$pts,col="white")
View(scp)
scp$pts
plot(scp$pts)
plot(classified_p[54,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]), 50)
plot(classified_p[54,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]), 100)
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]), 5)
plot(classified_p[54,])
lines(scp$pts,col="black")
plot(classified_p[4,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[4,]), 5)
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[4,]))
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[10,]), 5)
plot(classified_p[10,])
plot(classified_p[70,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[70,]), 5)
plot(classified_p[70,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[70,]), 50)
plot(classified_p[70,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[70,]))
plot(classified_p[70,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[54,]))
plot(classified_p[704,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[704,]))
plot(classified_p[74,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[74,]))
plot(classified_p[75,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[75,]))
plot(classified_p[75,])
lines(scp$pts,col="black")
View(scp)
source("~/.active-rstudio-document", echo=TRUE)
plot(classified_p[75,])
lines(scp$pts,col="black")
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[5,]))
plot(classified_p[5,])
plot(classified_p[23,])
#Run vector skeletonization algorithm---------------------------------
scp = simplecentre(onering(classified_p[23,]))
plot(classified_p[23,])
lines(scp$pts,col="black")
load_all()
library(devtools)
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(rivnet_dem, rivnet_rs, rivnet_rs_rast) #create SARN object
load_all()
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
plot(joinedNetwork$coincidentNetwork)
plot(joinedNetwork$not_coincidentNetwork)
trimmedNetwork <- sarn_trimNetworks(joinedNetwork) #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork$trimmedNetwork, dem, data$rs_raster) #build hydrography
fin <- sarn_hydrography(trimmedNetwork$trimmedNetwork, dem, data$rs_raster, 50) #build hydrography
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
trimmedNetwork <- sarn_trimNetworks(joinedNetwork) #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork$trimmedNetwork, dem, data$rs_raster, 50) #build hydrography
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
load_all()
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
trimmedNetwork <- sarn_trimNetworks(joinedNetwork) #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork$trimmedNetwork, dem, data$rs_raster, 50) #build hydrography
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
load_all()
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
plot(joinedNetwork$coincidentNetwork)
View(data)
View(trimmedNetwork)
load_all()
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
getwd()
#library(SARNr)
library(sf) #for vector processing
library(terra) #for raster processing
setwd(getwd())
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
knitr::opts_knit$set(root.dir = 'C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\SARNr')
#library(SARNr)
library(sf) #for vector processing
library(terra) #for raster processing
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
knitr::opts_knit$set(root.dir = 'C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\SARNr')
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
#run SARNr
data <- sarn_data(rivnet_dem, rivnet_rs, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
load_all()
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
knitr::opts_knit$set(root.dir = 'C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\SARNr')
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
knitr::opts_knit$set(root.dir = 'C:\\Users\\craig\\Documents\\OneDrive - University of Massachusetts\\Ongoing Projects\\SARNr')
#run SARNr
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
load_all()
library(devtools)
load_all()
#run SARNr
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
load_all()
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
load_all()
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
library(sf)
library(terra)
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
library(terra)
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
crs(rivnet_rs_rast, proj=TRUE)
rivnet_rs_rast
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
trimmedNetwork <- sarn_trimNetworks(joinedNetwork) #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork$trimmedNetwork, dem, data$rs_raster, 50) #build hydrography
#save river network to file
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
undebug()
undebug(sarn_data)
undebug(sarn_joinNetworks)
undebugonce()
undebug(introduction.Rmd)
undebug('introduction.Rmd')
Q
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
View(data)
library(devtools)
load_all()
#load in data
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
View(data)
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
load_all()
joinedNetwork <- sarn_joinNetworks(data, 5) #join DEM and RS networks
trimmedNetwork <- sarn_trimNetworks(joinedNetwork) #trim combined DEM/RS network
load_all()
data <- sarn_data(rivnet_dem, rivnet_rs_rast) #create SARN object
data <- sarn_data(rivnet_dem, rivnet_rs_rast, dem) #create SARN object
load_all()
data <- sarn_data(rivnet_dem, rivnet_rs_rast, dem) #create SARN object
load_all()
data <- sarn_data(rivnet_dem, rivnet_rs_rast, dem) #create SARN object
dem <- as.character(crs(data$dem_network))
rast <- crs(data$rs_raster, proj=TRUE)
rast_dem <- crs(data$dem, proj=TRUE)
crs(data$dem, proj=TRUE)
crs(data$dem, proj=TRUE)[1]
crs(data$dem, proj=TRUE)
View(rast_dem)
View(rast_dem)[[1]]
crs(data$dem, proj=TRUE)[[1]]
View(rast_dem)[1,]
View(rast_dem)[1,]
crs(data$rs_raster, proj=TRUE)
crs(data$dem, proj=TRUE)
View(data)
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(rivnet_dem, rivnet_rs_rast, dem) #create SARN object
View(dem)
View(rivnet_rs_rast)
crs(data$dem, proj=TRUE)
crs(data$dem, proj=TRUE)
crs(dem, proj=TRUE)
crs(data$rs_raster, proj=TRUE)
crs(rs_raster, proj=TRUE)
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(rivnet_dem, rivnet_rs_rast, dem_domain) #create SARN object
View(data)
joinedNetwork <- sarn_joinNetworks(data, bufferSize=5) #join DEM and RS networks
load_all()
load_all()
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
#rivnet_rs <- st_read('data/3m_centerlines_fin_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif')
data <- sarn_data(dem_network = rivnet_dem,
riverMask = rivnet_rs_rast,
dem = dem_domain) #create SARN object
View(data)
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
View(joinedNetwork)
load_all()
joinedNetwork <- sarn_joinNetworks(data = data,
bufferSize=5) #join DEM and RS networks
View(joinedNetwork)
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
View(trimmedNetwork)
View(joinedNetwork)
trimmedNetwork$coincidentNetwork
load_all()
trimmedNetwork <- sarn_trimNetworks(networks = joinedNetwork,
printOutput = 'Yes') #trim combined DEM/RS network
View(trimmedNetwork)
t <- trimmedNetwork$trimmedNetwork_fin
View(t)
fin <- sarn_hydrography(trimmedNetwork = trimmedNetwork$trimmedNetwork,
dem = data$dem,
riverMask = data$riverMask,
lengthThresh = 50,
printOutput = 'Yes') #build hydrography
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
st_write(fin, 'debug/hydrography.shp', delete_dsn = TRUE)
load_all()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif')
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif)
)
oksfav
f
``
``
''
A
rast
rast()
rivnet_dem <- st_read('data/DEM_rivnet_33333_20201009_045732_0f17.shp')
rivnet_rs_rast <- rast('data/3m_centerlines_fin_20201009_045732_0f17.tif')
dem_domain <- rast('data/dem_fin_20201009_045732_0f17.tif')
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif)
)
""
Q
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif)
image <- rast('data/PSScene4Band-20201009_045732_0f17.tif')
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
#Rosgen's Unimodal thresholding approach
rivnet_rs_rast <- sarn_classifyWater_unimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
plot(rivnet_rs_rast)
rivnet_rs_rast <- sarn_classifyWater_biimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
rivnet_rs_rast <- sarn_classifyWater_bimodal(img = image,
dem = dem_domain,
maxElev = 4000) #water is ignored above this elevation (to remove snow/ice/glaciers)
roxygen2
libraries(roxygen2)
library(roxygen2)
document()
sessionInfo()
rmarkdown::render('introduction.Rmd')
rmarkdown::render('vignettes/introduction.Rmd')
document()
library(devtools)
install()
library(SARNr)
SARNr::
library(devtools)
library(roxygen2)
document()
pkgbuild::compile_dll() #this grabs everything and updates the actual package
document()
build()
install_local("C:/Users/craig/Documents/OneDrive - University of Massachusetts/Ongoing Projects/SARNr_1.0.tar.gz")
library(SARNr)
